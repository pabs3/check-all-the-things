Things found on
<https://wiki.debian.org/HowToPackageForDebian#Check_points_for_any_package>
but not included here yet::

   find ! -type d -print0 | xargs -0 file | grep ': *ELF ' | sed 's/: +*.*//' | xargs -d'\n' --no-run-if-empty eu-elflint --quiet --gnu-ld --strict
   grep -r 'PATH' {cwd}
   grep -r 'x86_64-linux-gnu' {cwd}

Places to find new checks:

apt-file search --regex 'bin/.*(lint|check|valid|tidy|detect)'
apt-cache search --names-only '(lint|check|valid|tidy|detect)'
https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers
https://github.com/Chiel92/vim-autoformat#default-formatprograms
https://pagure.io/FedoraReview
https://github.com/michenriksen/gitrob/blob/master/signatures.json
https://docs.codeclimate.com/docs/list-of-engines
https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis
https://github.com/mcandre/linters
https://gitlab.com/linted/linted/tree/master/scripts
https://support.codacy.com/hc/en-us/articles/207995005-Special-Thanks
https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md#user-content-analysis
https://github.com/simplymeasured/ruby-appraiser
https://git.launchpad.net/ubuntu-security-tools/tree/audits
https://github.com/sk-/git-lint
https://prospector.readthedocs.io/en/master/supported_tools.html
http://www.flycheck.org/en/latest/languages.html
https://atomlinter.github.io/
https://github.com/coala/coala-bears/tree/master/bears
https://github.com/coala/bear-docs
https://github.com/alecthomas/gometalinter
https://golangci-lint.run/usage/linters/
https://github.com/jayclassless/tidypy
https://metacpan.org/release/Code-TidyAll
https://github.com/analysis-tools-dev/static-analysis
https://github.com/analysis-tools-dev/dynamic-analysis
https://github.com/dominikh/go-tools
https://github.com/exakat/php-static-analysis-tools
https://www.peerlyst.com/posts/a-list-of-static-analysis-tools-for-c-c-peerlyst
https://github.com/dense-analysis/ale
https://github.com/github/super-linter#supported-linters
https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis
https://github.com/wala/WALA/wiki/WALA-Based-Tools
https://github.com/google/styleguide
https://github.com/alfredodeza/khuno.vim
https://lwn.net/Articles/692054/
https://lwn.net/Articles/822969/
https://github.com/yugr/debian_pkg_test
https://littlemaninmyhead.wordpress.com/2019/08/04/dont-underestimate-grep-based-code-scanning/
https://docs.gitlab.com/ce/user/application_security/sast/
https://github.com/c-oberle/clone-detection-tools
https://danger.systems/
https://github.com/cmeissner/puppet-git-hooks
https://github.com/anchor/git-vogue
https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard

A mechanisms for filtering output is needed.

Only inform about a skipped check if there were actually matching files.

A mechanism to specify the amount/pedanticness of the output.

Support commands that must be run with `find -print0 | xargs -0` instead of `find -exec`

Sandboxing with kvmtool/bubblewrap/firejail/etc:

Files in cwd to read-only unless modify flag
Files in cwd to no-exec unless dangerous flag
All other files to read-only
All processes to cgroup, kill after each command

Add more types of deps for general and language-specific package managers

Add the ability to suggest command-lines for installing missing tools

Check if any tests contain dangerous commands:

python -m
python -c

Switch to sphinx and sphinxcontrib-autoprogram for manual pages:

sphinx and sphinxcontrib-autoprogram working to produce man pages at package build time
Sphinx config: https://github.com/DonnchaC/onionbalance/blob/cli-doc-page/docs/conf.py
Example document page: https://raw.githubusercontent.com/DonnchaC/onionbalance/cli-doc-page/docs/running-onionbalance.rst
call 'sphinx-build -N -bman docs/ docs/_build/man' in `override_dh_auto_build` and add correct paths to onionbalance.manpages

or python3-sphinx-argparse is available now

or python3-argparse-manpage is available now

.. vim:ts=3 sw=3 et ft=rst
