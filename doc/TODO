Make it useful for DDs with little time

Things found on
<https://wiki.debian.org/HowToPackageForDebian#Check_points_for_any_package>
but not included here yet::

   find ! -type d -print0 | xargs -0 file | grep ': *ELF ' | sed 's/: +*.*//' | xargs -d'\n' --no-run-if-empty eu-elflint --quiet --gnu-ld --strict
   grep -r 'PATH' {cwd}
   grep -r 'x86_64-linux-gnu' {cwd}

Places to find new checks:

apt-file search --regex 'bin/.*(lint|check|valid|tidy|detect)'
apt-cache search --names-only '(lint|check|valid|tidy|detect)'
https://github.com/vim-syntastic/syntastic/tree/master/syntax_checkers
https://github.com/Chiel92/vim-autoformat#default-formatprograms
https://pagure.io/FedoraReview
https://github.com/michenriksen/gitrob/blob/master/signatures.json
https://docs.codeclimate.com/docs/list-of-engines
https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis
https://github.com/mcandre/linters
https://gitlab.com/linted/linted/tree/master/scripts
https://support.codacy.com/hc/en-us/articles/207995005-Special-Thanks
https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md#user-content-analysis
https://github.com/simplymeasured/ruby-appraiser
https://git.launchpad.net/ubuntu-security-tools/tree/audits
https://github.com/sk-/git-lint
https://prospector.readthedocs.io/en/master/supported_tools.html
http://www.flycheck.org/en/latest/languages.html
https://atomlinter.github.io/
https://github.com/coala/coala-bears/tree/master/bears
https://github.com/coala/bear-docs
https://github.com/alecthomas/gometalinter
https://golangci-lint.run/usage/linters/
https://github.com/jayclassless/tidypy
https://metacpan.org/release/Code-TidyAll
https://github.com/analysis-tools-dev/static-analysis
https://github.com/analysis-tools-dev/dynamic-analysis
https://github.com/dominikh/go-tools
https://github.com/exakat/php-static-analysis-tools
https://www.peerlyst.com/posts/a-list-of-static-analysis-tools-for-c-c-peerlyst
https://github.com/dense-analysis/ale
https://github.com/github/super-linter#supported-linters
https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis
https://github.com/wala/WALA/wiki/WALA-Based-Tools
https://github.com/google/styleguide
https://github.com/alfredodeza/khuno.vim
https://lwn.net/Articles/692054/
https://lwn.net/Articles/822969/
https://github.com/yugr/debian_pkg_test
https://littlemaninmyhead.wordpress.com/2019/08/04/dont-underestimate-grep-based-code-scanning/
https://docs.gitlab.com/ce/user/application_security/sast/
https://github.com/c-oberle/clone-detection-tools
https://danger.systems/
https://github.com/cmeissner/puppet-git-hooks
https://github.com/anchor/git-vogue
https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard

Digest this document and come up with some tests:

http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html

Things that need defining:

   ruby-yaml-parser
   js-yaml
   xml-entity-crap
   json-eval

Suggest some tools:

http://s2e.epfl.ch/
https://klee.github.io/

One option for printing all the checks

A mechanisms for filtering output is needed.

Add descriptions

Add a suggestion to run manual/interactive tools:

https://cseweb.ucsd.edu/~jvoung/race/
https://github.com/OpenRCE/sulley

Only inform about a skipped check if there were actually matching files.

A mechanism to specify the amount/pedanticness of the output.

Support commands that must be run with `find -print0 | xargs -0` instead of `find -exec`

Sandboxing with kvmtool/bubblewrap/firejail/etc:

Files in cwd to read-only unless modify flag
Files in cwd to no-exec unless dangerous flag
All other files to read-only
All processes to cgroup, kill after each command

Add more types of deps for general and language-specific package managers

Add the ability to suggest command-lines for installing missing tools

Check if any tests contain dangerous commands:

python -m
python -c

configuration file

A way to print available checks and flags

make the fields multivalued

check for URLs

Blockers for uploading to Debian unstable:

Define which stage of the build each check runs from.

Add an option to control the verbosity of various commands.

Add options for disabling checks based on load etc.

Add support for passing the post-build commands into sbuild/pbuilder.

- list checks
- false-positives
- output verbosity
- ftpmasters checks??

Maybe suggest interactive helpers

- syntastic (vim plugin)
- develock-el (emacs minor mode, e.g. for highlighting overlong code lines, tabs vs spaces, etc.)
- emacs-goodies-el (many small helpers that highlight common issues)

Suggest other linters with no command-line interface:

elpa-package-lint

.. vim:ts=3 sw=3 et ft=rst

Allow detecting file types by interpreter string

Add an easter egg that prints some cats

verbosity levels:
	fix Ctrl+C
	add a remark if output came from a non-last item
